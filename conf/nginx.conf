worker_processes  2;
error_log  logs/error.log  info;
events {
    worker_connections  1024;
}




http {

    lua_shared_dict upstream_list 10m;

    init_by_lua_block {
        local upstreams = require "upstreams";
        upstreams.update_upstreams();
    }

    init_worker_by_lua_block {
        local upstreams = require "upstreams";
        local handle = nil;

        handle = function ()
            upstreams.update_upstreams();
            ngx.timer.at(5, handle);
        end
        ngx.timer.at(5, handle);
    }

    upstream moguhu_server {
        server 0.0.0.1; #占位server

        balancer_by_lua_block {
            local balancer = require "ngx.balancer";
            local upstreams = require "upstreams";

            local tmp_upstreams = upstreams.get_upstreams();
            local ip_port = tmp_upstreams[math.random(1, table.getn(tmp_upstreams))];
            ngx.log(ngx.ERR, "current :=============", math.random(1, table.getn(tmp_upstreams)));
            balancer.set_current_peer(ip_port.ip, ip_port.port);
        }
    }


    default_type  application/octet-stream;
    access_log  logs/access.log;
    lua_package_path "lualib/?.lua;guider/?.lua;;"; #文件查找路径

    lua_package_cpath "lualib/?.so;;"; # 模块路径


    server {
        listen       7777;
        server_name  localhost;
        default_type text/html;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /test {
          content_by_lua_file guider/test.lua;
        }
    }
}

stream {
    server {
        listen 1234;
        #proxy_timeout 20s;
        #proxy_pass backend;
        content_by_lua_block {
           ngx.say("HelloWorld")
        }
    }
}